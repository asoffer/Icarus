#ifndef ICARUS_IR_BYTE_CODE_CONTEXT_H
#define ICARUS_IR_BYTE_CODE_CONTEXT_H

#include <vector>

#include "absl/container/flat_hash_map.h"
#include "ir/byte_code/byte_code.h"
#include "ir/value/native_fn.h"

namespace ir {

// Holds all information about generated byte code.
struct ByteCodeContext {
 public:
  auto emplace(NativeFn f, ByteCode b) {
    auto [iter, inserted] = fn_data_.try_emplace(f, std::move(b), nullptr);
    return iter->second.first.begin();
  }

 private:
  // Holds the byte code for each function defined in this context. The
  // `ByteCode` object itself, once inserted into the map, should never be
  // modified. Iterators may reference into it. As `byte_code_` is further
  // modified, the values may be moved, but iterators will remain valid.
  absl::flat_hash_map<NativeFn,
                      std::pair<ByteCode, std::unique_ptr<NativeFn::Data>>>
      fn_data_;
};

}  // namespace ir

#endif  // ICARUS_IR_BYTE_CODE_CONTEXT_H
