syntax = "proto3";

import "ir/instruction/instruction.proto";

package ir;

message BasicBlockProto {
  repeated InstructionProto instruction = 1;

  message ReturnJump {}
  message ConditionalJump {
    oneof register {
      uint64 value_register = 1;
      uint64 output_register = 2;
      uint64 parameter_register = 3;
      uint64 stack_allocation_register = 4;
    }
    uint64 true_block = 5;
    uint64 false_block = 6;
  }
  message BlockJump {
    uint32 block = 1;
    uint32 after = 2;
  }

  oneof jump {
    ReturnJump return_jump = 2;
    uint64 unconditional_jump = 3;
    ConditionalJump conditional_jump = 4;
    BlockJump block_jump = 5;
  }
}

message StackAllocation {
  // A type id relative to the module's type system,
  // defined in //precompiled:value
  uint64 type_id = 1;
}

message SubroutineProto {
  // A type id relative to the module's type system,
  // defined in //precompiled:value
  uint64 callable_type_id = 1;
  repeated BasicBlockProto basic_block = 2;
  repeated StackAllocation allocation = 3;
}
