// Foreign functions and other symbols can be declared with `builtin.foreign`,
// which accepts a slice of chars as the name of the symbol to be loaded and
// the type of the symbol.
//
// For example, to use the C standard library functions `puts`, we declare
let puts ::= builtin.foreign("puts", [*]char -> i32)

// Then, we can call `puts` ourselves.
puts("Hello, world!".data)

// Note that we've named the function `puts` in our code. While it is common to
// use the same name for the foreign symbol and the identifier to which it is
// bound, there is no requirement to do so. We could just as easily have called
// it `c_puts`.
let c_puts ::= builtin.foreign("puts", [*]char -> i32)
c_puts("Hello, again!".data)
