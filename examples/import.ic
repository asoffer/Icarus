// Other modules may be imported via the `import` keyword.
//
// The string name, in this case "std.io" representing the module corresponds to
// a source file (or files) in an implementation-defined manner. In this case,
// we are loading the "io" module from the standard library.
io ::= import "std.io"

// Once loaded, any symbol exported from that module is usable if prefixed by
// `io`, the identifier declared above to represent the module. Note that there
// is no requirement to have the identifier to be named like the module itself.
// However, doing so is generally considered best-practice, as it reduces the
// frequency with which readers will have to consult the `import` expression.
io.Print("Hello, world!\n")

// `import` expressions are idempotent in the sense that importing the same,
// module multiple times produces the same module, even if it's bound to a
// different identifier. The imported module is only processed once.
also_io ::= import "std.io"
also_io.Print("Hello from the same module!\n")

// The `import` expression has type `module`, and can be used directly without
// first assigning to an identifier. While we do not encourage this style, it
// showcases how modules are values just like any other in the language.
(import "std.io").Print("Hello yet again!\n")
