#{export}
if ::= scope {
  init ::= jump(b: bool) {
    switch (b) {
      goto then() when true
      goto else() | exit() when false
    }
  }
  then ::= block {
    before ::= () -> () {}
    after ::= jump() { goto exit() }
  }

  else ::= block {
    before ::= () -> () {}
    after ::= jump() { goto exit() }
  }

  done ::= () -> () {}
}

#{export}
while ::= scope {
  init ::= jump(b: bool) {
    switch (b) {
      goto do() when true
      goto exit() when false
    }
  }

  do ::= block {
    before ::= () -> () {}
    after ::= jump() { goto start() }
  }

  done ::= () -> () {}
}

#{export}
repeat ::= scope (int64) {
  init ::= jump [state: *int64] (n: int64) {
    @state = n
    goto do() 
  }

  do ::= block {
    before ::= () -> () {}
    after ::= jump [state: *int64] () { 
      @state -= 1
      switch {
        goto exit() when @state == 0
        goto do() when @state != 0
      }
    }
  }

  done ::= () -> () {}
}
