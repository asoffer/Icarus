#{export}
if ::= scope {
  init ::= (b: bool) -> () {
    switch (b) {
      jump then() when true
      jump (else | exit)() when false
    }
  }
  then ::= block {
    before ::= () -> () {}
    after ::= () -> () { jump exit() }
  }
  else ::= block? {
    before ::= () -> () {}
    after ::= () -> () { jump exit() }
  }
  done ::= () -> () {}
}

#{export}
while ::= scope {
  init ::= (b: bool) -> () {
    switch (b) {
      jump do()   when true
      jump exit() when false
    }
  }
  do ::= block {
    before ::= () -> () {}
    after ::= () -> () { jump start() }
  }
  done ::= () -> () {}
}
