--   ::= import "core.ic"
io   ::= import "io.ic"
math ::= import "math/complex.ic"

mandelbrot ::= (a: math.complex) -> i64 {
  z := a
  for (0, 30) do [iter: i64] {
    z = z ^ 2 + a
    if (z'squared_norm > 4.0) {
      return iter + 1
    }
  }
  return 30
}

linspace ::= scope [c] (begin: f64, end: f64, steps: i64) {
  remaining := steps
  current := begin
  step := (end - begin) / (steps as f64)
  while (remaining > 0) {
    current >> c.do
    current += step
    remaining -= 1
  }
}

linspace (1.0, -1.0, 40) do [y: f64] {
  linspace (-2.0, 0.5, 80) do [x: f64] {
    n := mandelbrot(math.complex.{ real = x \\ imag = y})
    io.Print(builtin.ascii_encode((62 - n) as u8))
  }
  io.Print(!'\n')
}
