core ::= import "core.ic"

// TODO: The precise types here are actually architecture dependent. We need to
// provide some platform-querying capabilities so that we don't need to, for
// example hard-code malloc's parameter to u64 when in reality it is
// `std::size_t` which may be 32-bits on some platforms.
malloc ::= foreign("malloc", u64 -> [*]char)
free   ::= foreign("free", ([*]char) -> ())
memset ::= foreign("memset", ([*]char, i32, u64) -> [*]char)
memcpy ::= foreign("memcpy", ([*]char, [*]char, u64) -> [*]char)

allocate_and_copy ::= (ptr: [*]char, len: u64) -> [*]char {
  buffer := malloc(len)
  memcpy(buffer, ptr, len)
  return buffer
}

#{export}
string ::= struct {
  _data:     [*]char
  _length:   u64
  _capacity: u64

  (move) ::= (to: *string) -> string {
    return string.{
      _data     = core.exchange(to._data, null as [*]char)
      _length   = core.exchange(to._length, 0 as u64)
      _capacity = core.exchange(to._capacity, 0 as u64)
    }
  }

  (move) ::= (to: *string, from: *string) -> () {
    (to._data,     from._data)     = (from._data,     null)
    (to._length,   from._length)   = (from._length,   0 as u64)
    (to._capacity, from._capacity) = (from._capacity, 0 as u64)
  }

  (copy) ::= (to: *string) -> string {
    return string.{
      _data     = allocate_and_copy(to._data, to._length + 1 as u64)
      _length   = to._length
      _capacity = to._capacity
    }
  }

  (copy) ::= (to: *string, from: *string) -> () {
    free(to._data)
    to._length   = from._length
    to._capacity = from._capacity
    to._data     = allocate_and_copy(to._data, to._length + 1 as u64)
  }

  (destroy) ::= (self: *string) -> () { free(self._data) }

  make ::= (fill: char, len: u64) -> string {
    buffer := malloc(len + 1 as u64)
    memset(buffer, fill as i8 as i32, len)
    buffer[len] = `\0
    return string.{
      _data     = buffer 
      _length   = len
      _capacity = len
    }
  }
}

resize_buffer ::= (s: *string, new_capacity: u64) -> () {
  buffer := malloc(new_capacity + 1 as u64)
  memcpy(buffer, s._data, s._length + 1 as u64)
  free(s._data)
  s._data = buffer
  s._capacity = new_capacity
}

#{export}
length ::= (s: *string) => s._length

#{export}
is_empty ::= (s: *string) => s._length == 0 as u64

#{export}
append ::= (s: *string, character: char) -> () {
  core.if (s._capacity == s._length) then {
    resize_buffer(s, s._capacity * 2 as u64)
  }

  s._data[s._length] = character
  s._length += 1 as u64
  s._data[s._length] = `\0
}

#{export}
append ::= (s: *string, slice: char[]) -> () {
  core.if (s._length + slice.length > s._capacity) then {
    resize_buffer(s, s._length + slice.length)
  }

  memcpy((&s._data[0]) + s._length, slice.data, slice.length + 1 as u64)
  s._length += slice.length
}

#{export}
append ::= (s: *string, from: *string) -> () {
  core.if (s._length + from._length > s._capacity) then {
    resize_buffer(s, s._length + from._length)
  }

  memcpy((&s._data[0]) + s._length, &from._data[0], from._length + 1 as u64)
  s._length += from._length
}

#{export}
Print ::= (s: *string) -> () {
  printf ::= foreign("printf", ([*]char, [*]char) -> i32)
  core.if (!s'is_empty) then { printf(&"%s"[0], s._data) }
}

#{export}
make_string ::= (fill: char, len: u64) -> string {
  buffer := malloc(len + 1 as u64)
  memset(buffer, fill as i8 as i32, len)
  buffer[len] = `\0
  return string.{
    _data     = buffer 
    _length   = len
    _capacity = len
  }
}

#{export}
make_string ::= (s: char[]) => string.{
  _data     = allocate_and_copy(s.data, s.length + 1 as u64)
  _length   = s.length
  _capacity = s.length
}
