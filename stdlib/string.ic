core ::= import "core.ic"

// TODO: The precise types here are actually architecture dependent. We need to
// provide some platform-querying capabilities so that we don't need to, for
// example hard-code malloc's parameter to u64 when in reality it is
// `std::size_t` which may be 32-bits on some platforms.
malloc ::= foreign("malloc", u64 -> [*]u8)
free   ::= foreign("free", ([*]u8) -> ())
memset ::= foreign("memset", ([*]u8, i32, u64) -> [*]u8)
memcpy ::= foreign("memcpy", ([*]u8, [*]u8, u64) -> [*]u8)

#{export}
string ::= struct {
  // TODO: Remove export of _data.
  #{export}
  _data:     [*]u8
  #{export}
  _length:   u64
  #{export}
  _capacity: u64

  (move) ::= (to: *string, from: *string) -> () {
    (to._data,     from._data)     = (from._data,     null as [*]u8)
    (to._length,   from._length)   = (from._length,   0 as u64)
    (to._capacity, from._capacity) = (from._capacity, 0 as u64)
  }

  (copy) ::= (to: *string, from: *string) -> () {
    free(to._data)
    to._data     = malloc(from._length + 1 as u64)
    to._length   = from._length
    to._capacity = from._capacity
    memcpy(to._data, from._data, from._length)
    to._data[to._length] = 0 as u8
  }


  destroy ::= (self: *string) -> () { free(self._data) }
}

resize_buffer ::= (s: *string, new_capacity: u64) -> () {
  buffer := malloc(new_capacity + 1 as u64)
  memcpy(buffer, s._data, s._length + 1 as u64)
  free(s._data)
  s._data = buffer
  s._capacity = new_capacity
}

#{export}
length ::= (s: *string) => s._length

#{export}
is_empty ::= (s: *string) => s._length == 0 as u64

#{export}
append ::= (s: *string, character: u8) -> () {
  core.if (s._capacity == s._length) then {
    resize_buffer(s, s._capacity * 2 as u64)
  }

  s._data[s._length] = character
  s._length += 1 as u64
  s._data[s._length] = 0 as u8
}

#{export}
append ::= (s: *string, bv: byte_view) -> () {
  core.if (s._length + bv.length > s._capacity) then {
    resize_buffer(s, s._length + bv.length)
  }

  memcpy((&s._data[0]) + s._length, &bv[0], bv.length + 1 as u64)
  s._length += bv.length
}

#{export}
append ::= (s: *string, from: *string) -> () {
  core.if (s._length + from._length > s._capacity) then {
    resize_buffer(s, s._length + from._length)
  }

  memcpy((&s._data[0]) + s._length, &from._data[0], from._length + 1 as u64)
  s._length += from._length
}

#{export}
Print ::= (s: *string) -> () {
  printf ::= foreign("printf", ([*]u8, [*]u8) -> i32)
  core.if (!s'is_empty) then { printf(&"%s"[0], s._data) }
}

#{export}
make_string ::= (fill: u8, len: u64) -> string {
  buffer := malloc(len + 1 as u64)
  memset(buffer, fill as i32, len)
  buffer[len] = 0 as u8
  return string.{
    _data     = buffer 
    _length   = len
    _capacity = len
  }
}

#{export}
make_string ::= (bv: byte_view) -> string {
  buffer := malloc(bv.length + 1 as u64)
  memcpy(buffer, &bv[0], bv.length + 1 as u64)
  return string.{
    _data     = buffer 
    _length   = bv.length
    _capacity = bv.length
  }
}
