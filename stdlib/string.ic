core ::= import "core.ic"
mem  ::= import "memory.ic"

// TODO: The precise types here are actually architecture dependent. We need to
// provide some platform-querying capabilities so that we don't need to, for
// example hard-code malloc's parameter to u64 when in reality it is
// `std::size_t` which may be 32-bits on some platforms.

#{export}
string ::= struct {
  _data:     [*]char
  _length:   u64
  _capacity: u64

  #{export}
  make ::= (fill: char, len: u64) -> string {
    buffer := mem.allocate(memory, len + 1)
    mem.fill(buffer, fill as u8)
    @(&buffer[len] as *char) = !\0
    return string.{
      _data     = buffer.data
      _length   = len
      _capacity = len
    }
  }

  #{export}
  make ::= (s: []char) -> string {
    raw := s'mem.to_raw
    raw = slice(raw.data, raw.length + 1)
    return string.{
      _data     = mem.clone(raw).data
      _length   = s.length
      _capacity = s.length
    }
  }

  #{export}
  make ::= (capacity: u64) -> string {
    buffer := mem.allocate(memory, capacity + 1)
    @(&buffer[0] as *char) = !\0
    return string.{
      _data     = buffer.data
      _length   = 0
      _capacity = capacity
    }
  }

  (move) ::= (to: *string) -> string {
    return string.{
      _data     = core.exchange(to._data, null)
      _length   = core.exchange(to._length, 0)
      _capacity = core.exchange(to._capacity, 0)
    }
  }

  (move) ::= (to: *string, from: *string) -> () {
    (to._data,     from._data)     = (from._data,     null)
    (to._length,   from._length)   = (from._length,   0)
    (to._capacity, from._capacity) = (from._capacity, 0)
  }

  (copy) ::= (to: *string) -> string {
    return string.{
      _data     = mem.clone(to'raw_null_terminated_view).data
      _length   = to._length
      _capacity = to._capacity
    }
  }

  (copy) ::= (to: *string, from: *string) -> () {
    mem.deallocate(to._data)
    to._length   = from._length
    to._capacity = from._capacity
    to._data     = mem.clone(to'raw_null_terminated_view).data
  }

  (destroy) ::= (self: *string) -> () { mem.deallocate(self._data) }
}

// Resizes the buffer, copying the string data to the new buffer, excluding the
// null terminator. Assumes `new_capacity` is at least as large as`s._capacity`.
resize_buffer ::= (s: *string, new_capacity: u64) -> () {
  buffer := mem.expand(s'raw_null_terminated_view, new_capacity + 1)
  mem.deallocate(s._data)
  s._data = buffer.data
  s._capacity = new_capacity
}

#{export}
length ::= (s: *string) => s._length

#{export}
is_empty ::= (s: *string) => s._length == 0

#{export}
append ::= (s: *string, character: char) -> () {
  core.if (s._capacity == 0) then {
    resize_buffer(s, 1)
  } else core.if (s._capacity == s._length) then {
    resize_buffer(s, s._capacity * 2)
  }
  s._data[s._length] = init character
  s._length += 1
  s._data[s._length] = init !\0
}

#{export}
append ::= (s: *string, char_slice: []char) -> () {
  core.if (s._length + char_slice.length > s._capacity) then {
    resize_buffer(s, s._length + char_slice.length)
  }

  core.if (char_slice.length > 0) then {
    len := char_slice.length + 1
    mem.Copy(from = slice(char_slice.data as [*]memory, len),
             to   = slice(s'at(s._length) as [*]memory, len))
    s._length += char_slice.length
  }
}

#{export}
append ::= (s: *string, from: *string) -> () {
  s'append(from'view)
}

#{export}
Print ::= (s: *string) -> () {
  printf ::= foreign("printf", ([*]char, [*]char) -> i32)
  core.if (not s'is_empty) then { printf("%s".data, s._data) }
}

#{export}
at ::= (s: *string, n: u64) => &s._data[n]

#{export}
at ::= (s: *string, lo: u64, hi: u64) => slice(&s._data[lo], hi - lo)

#{export}
view ::= (s: *string) => slice(s'at(0), s._length)

raw_null_terminated_view ::= (s: *string) => slice(s'at(0) as [*]memory, s._length + 1)
