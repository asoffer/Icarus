core ::= import "core.ic"
mem  ::= import "memory.ic"

#{export}
boxed ::= struct (T :: type) {
  _ptr: *T

  (move) ::= (from: *boxed(T)) -> boxed(T) {
    p: *T
    (p, from._ptr) = (from._ptr, null)
    return boxed(T).{ _ptr = p }
  }

  (move) ::= (to: *boxed(T), from: *boxed(T)) -> () {
    to_free: *T
    (to_free, to._ptr, from._ptr) = (to._ptr, from._ptr, null)
    mem.deallocate(to_free)
  }

  (destroy) ::= (self: *boxed(T)) -> () {
    destroy self._ptr
    mem.deallocate(self._ptr)
  }
}

#{export}
get ::= (T :: type, ptr: *boxed(T)) => ptr._ptr

#{export}
release ::= (T :: type, ptr: *boxed_array(T)) => core.exchange(ptr._ptr, null as [*]T)

boxed_array ::= struct (T :: type) {
  _ptr: [*]T
  _length: u64

  (move) ::= (from: *boxed_array(T)) -> boxed_array(T) {
    return boxed_array(T).{
      _ptr = core.exchange(from._ptr, null as [*]T)
      _length = core.exchange(from._length, 0 as u64)
    }
  }

  (move) ::= (to: *boxed_array(T), from: *boxed_array(T)) -> () {
    mem.deallocate(core.exchange(to._ptr, from._ptr, null as [*]T))
    to._length = core.exchange(from._length, 0 as u64)
  }

  (destroy) ::= (self: *boxed_array(T)) -> () {
    mem.reverse_destroy_buffer(T, self._ptr, self._length)
    mem.deallocate(self._ptr)
  }
}

#{export}
get ::= (T :: type, ptr: *boxed_array(T)) => ptr._ptr

#{export}
length ::= (T :: type, ptr: *boxed_array(T)) => ptr._length

#{export}
release ::= (T :: type, ptr: *boxed_array(T)) -> ([*]T, u64) {
  return core.exchange(ptr._ptr, null as [*]T), ptr._length
}

#{export}
box ::= (value: $value) -> boxed(value:?) {
  T ::= value:?
  ptr := mem.allocate(T)
  @ptr = value
  return boxed(T).{ _ptr = ptr }
}

#{export}
box_array ::= (repeat: *$repeat, count: u64) -> boxed_array((@repeat):?) {
  T ::= (@repeat):?
  ptr := mem.allocate(T, count)
  core.for (0, count as i64) do [i: i64] {
    ptr[i] = copy @repeat
  }
  return boxed_array(T).{ 
    _ptr = ptr 
    _length = count
  }
}
