constants ::= import "math/constants.ic"
ctypes    ::= import "c/types.ic"
c         ::= import "c/math.ic"

#{export}
angle ::= struct {
  // Represents the value of the angle in radians
  _val: f64
}

#{export} Radians ::= (x: f64) => angle.{ _val = x }

#{export}
Degrees ::= (x: f64) => angle.{ _val = constants.Pi * x / 180. }

#{export} (+) ::= (a: angle, b: angle) => angle.{ _val = a._val + b._val }
#{export} (-) ::= (a: angle, b: angle) => angle.{ _val = a._val - b._val }
#{export} (-) ::= (a: angle) => angle.{ _val = -a._val }
#{export} (*) ::= (a: angle, x: f64) => angle.{ _val = a._val * x }
#{export} (*) ::= (x: f64, a: angle) => angle.{ _val = a._val * x }

#{export} as_degrees ::= (a: angle) => a._val * 180. / constants.Pi 
#{export} as_radians ::= (a: angle) => a._val

#{export}    Sin     ::= (a: angle) => c.sin(a._val as ctypes.double) as f64
#{export}    Cos     ::= (a: angle) => c.cos(a._val as ctypes.double) as f64
#{export}    Tan     ::= (a: angle) => c.tan(a._val as ctypes.double) as f64
#{export} ArcSin     ::= (x: f64) => Radians(c.asin(x as ctypes.double) as f64)
#{export} ArcCos     ::= (x: f64) => Radians(c.acos(x as ctypes.double) as f64)
#{export} ArcTan     ::= (x: f64) => Radians(c.atan(x as ctypes.double) as f64)
#{export}    SinH    ::= (a: angle) => c.sinh(a._val as ctypes.double) as f64
#{export}    CosH    ::= (a: angle) => c.cosh(a._val as ctypes.double) as f64
#{export}    TanH    ::= (a: angle) => c.tanh(a._val as ctypes.double) as f64
#{export} Hypotenuse ::= builtin.foreign("hypot", (f64, f64) -> f64)
#{export} Hypotenuse ::= builtin.foreign("hypotf", (f32, f32) -> f32)
