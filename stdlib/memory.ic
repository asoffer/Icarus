core ::= import "core.ic"

io     ::= import "io.ic"
memcpy ::= foreign("memcpy", ([*]memory, [*]memory, u64) -> [*]memory)

#{export}
allocate ::= (T :: type) -> *T {
  malloc ::= foreign("malloc", u64 -> *T)
  return malloc(T'bytes)
}

#{export}
allocate ::= (T :: type, l: u64) -> []T {
  malloc ::= foreign("malloc", u64 -> [*]T)
  return slice(malloc(T'bytes * l), l)
}

#{export}
// TODO: Accept either a pointer or a buffer pointer.
deallocate ::= (ptr: ~`T) -> () {
  free ::= foreign("free", T -> ())
  free(ptr)
}

#{export}
reverse_destroy_buffer ::= (ptr: ~[*]`T, count: u64) -> () {
  p := ptr + count
  core.repeat (count as i64) do {
    p -= 1
    destroy p
  }
}

#{export}
clone ::= (m: []memory) => expand(m, m.length)

#{export}
expand ::= (m: []memory, new_size: u64) -> []memory {
  buffer := allocate(memory, new_size)
  memcpy(buffer.data, m.data, m.length)
  return buffer
}

#{export}
fill ::= (m: []memory, value: u8) -> () {
  memset ::= foreign("memset", ([*]char, i32, u64) -> [*]char)
  memset(m.data, value as i32, m.length)
}

#{export}
Copy ::= (from: []memory, to: []memory) -> () {
  memcpy(to.data, from.data, to.length)
}

// TODO: If we don't require length to be a multiple of alignment, we need to account for that here.
#{export}
to_raw ::= (s: ~[]`T) => slice(s.data as [*]memory, s.length * T'bytes)
