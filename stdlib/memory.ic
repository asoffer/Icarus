core ::= import "core.ic"

#{export}
allocate ::= (T :: type) -> *T {
  malloc ::= foreign("malloc", u64 -> *T)
  return malloc(T'bytes)
}

#{export}
allocate ::= (T :: type, l: u64) -> [*]T {
  malloc ::= foreign("malloc", u64 -> [*]T)
  return malloc(T'bytes * l)
}

#{export}
// TODO: Accept either a pointer or a buffer pointer.
deallocate ::= (ptr: ~`T) -> () {
  free ::= foreign("free", T -> ())
  free(ptr)
}

#{export}
reverse_destroy_buffer ::= (ptr: ~[*]`T, count: u64) -> () {
  p := ptr + count
  core.repeat (count as i64) do {
    p -= 1
    destroy p
  }
}
