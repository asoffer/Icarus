#{export}
if ::= scope {
  enter ::= jump(b: bool) { goto b, then(), else() | done() }

  then ::= block {
    before ::= () -> () {}
    after ::= jump() { goto done() }
  }

  else ::= block {
    before ::= () -> () {}
    after ::= jump() { goto done() }
  }

  exit ::= () -> () {}
}

#{export}
while ::= scope {
  enter ::= jump(b: bool) { goto b, do(), done() }

  do ::= block {
    before ::= () -> () {}
    after ::= jump() { goto start() }
  }

  exit ::= () -> () {}
}

// TODO: Accept unsigned as well
#{export}
repeat ::= scope (i64) {
  enter ::= jump [state: *i64] (n: i64) {
    @state = n
    goto @state == 0, done(), do()
  }

  do ::= block {
    before ::= () -> () {}
    after ::= jump [state: *i64] () {
      @state -= 1
      goto @state == 0, done(), do()
    }
  }

  exit ::= () -> () {}
}

range ::= struct {
  current: i64
  end: i64
}

#{export}
for ::= scope (range) {
  enter ::= jump [state: *range] (begin: i64, end: i64) {
    state.current = begin
    state.end = end
    goto state.current >= state.end, done(), do(state.current)
  }

  do ::= block {
    before ::= (n: i64) => n
    after ::= jump [state: *range] () {
      state.current += 1
      goto state.current >= state.end, done(), do(state.current)
    }
  }

  exit ::= () -> () {}
}

#{export}
exchange ::= (x: *~`T, y: T) -> T {
  result: T
  result = @x
  @x = y
  return result
}

#{export}
exchange ::= (x: *~`T, y: *T, z: T) -> T {
  result: T
  result = @x
  @x = @y
  @y = z
  return result
}

max_impl ::= (t :: type) -> integer {
  if (t == i8) then { return 127 }
  if (t == i16) then { return 32767 }
  if (t == i32) then { return 2147483647 }
  if (t == i64) then { return 9223372036854775807 }
  'abort // TODO: This should emit an error message. Or better yet we should
         // constrain `t` to only accept supported types.
}

#{export}
max ::= (t :: type) => max_impl(t) as t

#{export}
element_array_of ::= (num :: integer, value: ~`t) -> [num; t] {
  result: [num; t]
  for (0, num) do [i: i64] {
    result[i] = copy value
  }
  return result
}
