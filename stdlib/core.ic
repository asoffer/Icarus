#{export}
if ::= scope {
  enter ::= jump(b: bool) { goto b, then(), else() | done() }

  then ::= block {
    before ::= () -> () {}
    after ::= jump() { goto done() }
  }

  else ::= block {
    before ::= () -> () {}
    after ::= jump() { goto done() }
  }

  exit ::= () -> () {}
}

#{export}
while ::= scope {
  enter ::= jump(b: bool) { goto b, do(), done() }

  do ::= block {
    before ::= () -> () {}
    after ::= jump() { goto start() }
  }

  exit ::= () -> () {}
}

// TODO: Accept unsigned as well
#{export}
repeat ::= scope (i64) {
  enter ::= jump [state: *i64] (n: i64) {
    @state = n
    goto @state == 0, done(), do()
  }

  do ::= block {
    before ::= () -> () {}
    after ::= jump [state: *i64] () {
      @state -= 1
      goto @state == 0, done(), do()
    }
  }

  exit ::= () -> () {}
}

// TODO: We shouldn't need to export any of this.
#{export}
range ::= struct {
  #{export}
  current: i64
  #{export}
  end: i64
}

#{export}
for ::= scope (range) {
  enter ::= jump [state: *range] (begin: i64, end: i64) {
    @state = range.{ current = begin \\ end = end }
    goto state.current >= state.end, done(), do(state.current)
  }

  do ::= block {
    before ::= (n: i64) => n
    after ::= jump [state: *range] () {
      state.current += 1
      goto state.current >= state.end, done(), do(state.current)
    }
  }

  exit ::= () -> () {}
}

#{export}
exchange ::= (x: *$y, y: $y) -> $x {
  result: y:?
  result = @x
  @x = y
  return result
}

#{export}
exchange ::= (x: *$z, y: *$z, z: $z) -> $x {
  result: z:?
  result = @x
  @x = @y
  @y = z
  return result
}
