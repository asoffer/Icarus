core   ::= import "core.ic"
memory ::= import "memory.ic"

// TODO: The precise types here are actually architecture dependent. We need to
// provide some platform-querying capabilities so that we don't need to, for
// example hard-code malloc's parameter to u64 when in reality it is
// `std::size_t` which may be 32-bits on some platforms.

#{export}
array ::= struct (T :: type) {
  _data:     [*]T
  _length:   u64
  _capacity: u64

  #{export}
  make ::= (fill: T, len: u64) -> array(T) {
    buffer := memory.allocate(byte, len * builtin.bytes(T))
    core.for (0, len as i64) do [i: i64] {
      (buffer.data as [*]T)[i] = init fill
    }
    return array(T).{
      _data     = buffer.data
      _length   = len
      _capacity = len
    }
  }

  #{export}
  make ::= (s: []T) -> array(T) {
    raw := s'memory.to_raw
    raw = slice(raw.data, raw.length)
    return array(T).{
      _data     = memory.clone(raw).data
      _length   = s.length
      _capacity = s.length
    }
  }
// 
//   #{export}
//   make ::= (capacity: u64) -> string {
//     buffer := memory.allocate(byte, capacity + 1 as u64)
//     @(&buffer[0] as *char) = !\0
//     return string.{
//       _data     = buffer.data
//       _length   = 0 as u64
//       _capacity = capacity
//     }
//   }

  (move) ::= (to: *array(T)) -> array(T) {
    return array(T).{
      _data     = core.exchange(to._data, null)
      _length   = core.exchange(to._length, 0 as u64)
      _capacity = core.exchange(to._capacity, 0 as u64)
    }
  }

  (move) ::= (to: *array(T), from: *array(T)) -> () {
    (to._data,     from._data)     = (from._data,     null)
    (to._length,   from._length)   = (from._length,   0 as u64)
    (to._capacity, from._capacity) = (from._capacity, 0 as u64)
  }

  (destroy) ::= (self: *array(T)) -> () { memory.deallocate(self._data) }
}

// Resizes the buffer, copying the string data to the new buffer, excluding the
// null terminator. Assumes `new_capacity` is at least as large as`s._capacity`.
// resize_buffer ::= (s: *string, new_capacity: u64) -> () {
//   buffer := memory.expand(s'raw_null_terminated_view, new_capacity + 1 as u64)
//   memory.deallocate(s._data)
//   s._data = buffer.data
//   s._capacity = new_capacity
// }
// 
// #{export}
// length ::= (s: *string) => s._length
// 
// #{export}
// is_empty ::= (s: *string) => s._length == 0 as u64
// 
// #{export}
// append ::= (s: *string, character: char) -> () {
//   core.if (s._capacity == 0 as u64) then {
//     resize_buffer(s, 1 as u64)
//   } else core.if (s._capacity == s._length) then {
//     resize_buffer(s, s._capacity * 2 as u64)
//   }
//   s._data[s._length] = init character
//   s._length += 1 as u64
//   s._data[s._length] = init !\0
// }
// 
// #{export}
// append ::= (s: *string, char_slice: []char) -> () {
//   core.if (s._length + char_slice.length > s._capacity) then {
//     resize_buffer(s, s._length + char_slice.length)
//   }
// 
//   core.if (char_slice.length > 0 as u64) then {
//     len := char_slice.length + 1 as u64
//     memory.Copy(from = slice(char_slice.data as [*]byte, len),
//              to   = slice(s'at(s._length) as [*]byte, len))
//     s._length += char_slice.length
//   }
// }
// 
// #{export}
// append ::= (s: *string, from: *string) -> () {
//   s'append(from'view)
// }
// 
// #{export}
// Print ::= (s: *string) -> () {
//   printf ::= builtin.foreign("printf", ([*]char, [*]char) -> i32)
//   core.if (not s'is_empty) then { printf("%s".data, s._data) }
// }
// 
// #{export}
// at ::= (s: *string, n: u64) => &s._data[n]
// 
// #{export}
// at ::= (s: *string, lo: u64, hi: u64) => slice(&s._data[lo], hi - lo)
// 
// #{export}
// view ::= (s: *string) => slice(s'at(0 as u64), s._length)
// 
// r

a := array(i64).make(3, 5)
