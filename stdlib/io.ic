core ::= import "core.ic"

#{export} Print ::= (n: i8) -> () { Print(n as i64) }
#{export} Print ::= (n: i16) -> () { Print(n as i64) }
#{export} Print ::= (n: i32) -> () { Print(n as i64) }
#{export} Print ::= (n: i64) -> () {
  printf ::= foreign("printf", (*u8, i64) -> i32)
  printf(&"%lld"[0], n)
}

#{export} Print ::= (n: u8) -> () { Print(n as u64) }
#{export} Print ::= (n: u16) -> () { Print(n as u64) }
#{export} Print ::= (n: u32) -> () { Print(n as u64) }
#{export} Print ::= (n: u64) -> () {
  printf ::= foreign("printf", (*u8, u64) -> i32)
  printf(&"%llu"[0], n)
}

#{export} Print ::= (b: bool) -> () {
  core.if (b) then { Print("true") } else { Print("false") }
}

#{export} Print ::= (s: byte_view) -> () {
  printf ::= foreign("printf", (*u8, *u8) -> i32)
  printf(&"%s"[0], &s[0])
}

#{export} Print ::= (f: f32) -> () { Print(f as f64) }

#{export} Print ::= (f: f64) -> () {
  printf ::= foreign("printf", (*u8, f64) -> i32)
  printf(&"%f"[0], f)
}
