#{export} Print ::= (n: i8) -> () { Print(n as i64) }
#{export} Print ::= (n: i16) -> () { Print(n as i64) }
#{export} Print ::= (n: i32) -> () { Print(n as i64) }
#{export} Print ::= (n: i64) -> () {
  printf ::= builtin.foreign("printf", ([*]char, i64) -> i32)
  printf("%lld".data, n)
}

#{export} Print ::= (n: u8) -> () { Print(n as u64) }
#{export} Print ::= (n: u16) -> () { Print(n as u64) }
#{export} Print ::= (n: u32) -> () { Print(n as u64) }
#{export} Print ::= (n: u64) -> () {
  printf ::= builtin.foreign("printf", ([*]char, u64) -> i32)
  printf("%llu".data, n)
}

#{export} Print ::= (b: bool) -> () {
  if (b) { Print("true") } else { Print("false") }
}

#{export} Print ::= (c: char) -> () {
  printf ::= builtin.foreign("printf", ([*]char, char) -> i32)
  printf("%c".data, c)
}

#{export} Print ::= (s: [/]char) -> () {
  printf ::= builtin.foreign("printf", ([*]char, u64, [*]char) -> i32)
  printf("%.*s".data, s.length, &s[0])
}

// Warning: Unsafe, prints everything up to the first null byte.
#{export} Print ::= (s: [*]char) -> () {
  printf ::= builtin.foreign("printf", ([*]char, [*]char) -> i32)
  printf("%s".data, s)
}

#{export} Print ::= (f: f32) -> () { Print(f as f64) }

#{export} Print ::= (f: f64) -> () {
  printf ::= builtin.foreign("printf", ([*]char, f64) -> i32)
  printf("%f".data, f)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1) -> () {
  Print(a0)
  Print(a1)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4, a5: ~`A5) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
  Print(a5)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4, a5: ~`A5,
           a6: ~`A6) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
  Print(a5)
  Print(a6)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4, a5: ~`A5,
           a6: ~`A6, a7: ~`A7) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
  Print(a5)
  Print(a6)
  Print(a7)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4, a5: ~`A5,
           a6: ~`A6, a7: ~`A7, a8: ~`A8) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
  Print(a5)
  Print(a6)
  Print(a7)
  Print(a8)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4, a5: ~`A5,
           a6: ~`A6, a7: ~`A7, a8: ~`A8, a9: ~`A9) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
  Print(a5)
  Print(a6)
  Print(a7)
  Print(a8)
  Print(a9)
}

#{export}
Print ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2, a3: ~`A3, a4: ~`A4, a5: ~`A5,
           a6: ~`A6, a7: ~`A7, a8: ~`A8, a9: ~`A9, a10: ~`A10) -> () {
  Print(a0)
  Print(a1)
  Print(a2)
  Print(a3)
  Print(a4)
  Print(a5)
  Print(a6)
  Print(a7)
  Print(a8)
  Print(a9)
  Print(a10)
}

#{export} Abort ::= (value: ~`T) -> () {
  Print(value, "\n")
  abort()
}

#{export} Abort ::= (a0: ~`A0, a1: ~`A1) -> () {
  Print(a0, a1, "\n")
  abort()
}

#{export} Abort ::= (a0: ~`A0, a1: ~`A1, a2: ~`A2) -> () {
  Print(a0, a1, a2, "\n")
  abort()
}
